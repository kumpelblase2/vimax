plugins {
    id "com.github.node-gradle.node" version "2.1.1"
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "org.springframework.boot" version "2.4.2"
    id "org.jetbrains.kotlin.jvm" version "1.4.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.21"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'io.spring.dependency-management'

group = 'de.eternalwings'
version = '1.2-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
    maven { url "https://dl.bintray.com/hotkeytlt/maven" }
    maven { url "https://dl.bintray.com/s1m0nw1/KtsRunner" }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("net.bramp.ffmpeg:ffmpeg:0.6.2")
    implementation("org.flywaydb:flyway-core:7.4.0")
    implementation("com.vladmihalcea:hibernate-types-52:2.4.2")
    implementation("com.github.h0tk3y.betterParse:better-parse-jvm:0.4.0-alpha-3")
    implementation("org.xerial:sqlite-jdbc:3.27.2.1")
    implementation("de.swirtz:ktsRunner:0.0.9")
    implementation("org.jobrunr:jobrunr-spring-boot-starter:1.2.3")
    implementation("org.jetbrains.kotlin:kotlin-script-runtime:1.4.21")
    runtimeOnly("org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.4.21")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
	testCompile("org.springframework.boot:spring-boot-starter-test")
}

task buildFrontend(type: NpmTask) {
    args = ["run", "build"]
}

processResources {
    from('src/frontend/dist') {
        into 'public'
    }
}
processResources.dependsOn(buildFrontend)

node {
    npmInstallCommand = "ci"
    nodeModulesDir = file("${project.projectDir}/src/frontend")
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
    manifest {
        attributes 'Main-Class': 'de.eternalwings.vima.VimaApplicationKt'
    }

    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}
